import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst, StaleWhileRevalidate } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';

// Precache all assets generated by the build process
precacheAndRoute(self.__WB_MANIFEST);

// Cache page navigations (HTML) with network first strategy
registerRoute(
  ({ request }) => request.mode === 'navigate',
  new NetworkFirst({
    cacheName: 'pages-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// Cache CSS, JS, and Web Worker requests with Stale While Revalidate strategy
registerRoute(
  ({ request }) =>
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'worker',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// Cache images with Cache First strategy
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 60 * 24 * 60 * 60, // 60 days
      }),
    ],
  })
);

// Cache Supabase API requests with Network First strategy
registerRoute(
  ({ url }) => url.origin === 'https://uyrrdrbyehywvvmfrkpg.supabase.co' && url.pathname.startsWith('/rest/'),
  new NetworkFirst({
    cacheName: 'supabase-api-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 5 * 60, // 5 minutes - short TTL for API data
      }),
    ],
  })
);

// Cache weather API requests with Network First strategy
registerRoute(
  ({ url }) => url.origin === 'https://api.openweathermap.org',
  new NetworkFirst({
    cacheName: 'weather-api-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 60, // 30 minutes
      }),
    ],
  })
);

// Listen for messages from the main thread
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Handle offline sync queue
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-offline-data') {
    event.waitUntil(syncOfflineData());
  }
});

async function syncOfflineData() {
  // Get pending actions from IndexedDB and sync them
  try {
    const db = await openDB('agro-vistara-offline', 1);
    const tx = db.transaction('pending-actions', 'readonly');
    const store = tx.objectStore('pending-actions');
    const pendingActions = await store.getAll();

    for (const action of pendingActions) {
      try {
        // Sync the action to Supabase
        await fetch(action.url, {
          method: action.method,
          headers: action.headers,
          body: JSON.stringify(action.data),
        });

        // Remove from IndexedDB after successful sync
        const deleteTx = db.transaction('pending-actions', 'readwrite');
        const deleteStore = deleteTx.objectStore('pending-actions');
        await deleteStore.delete(action.id);
      } catch (error) {
        console.error('Failed to sync action:', action, error);
      }
    }
  } catch (error) {
    console.error('Sync failed:', error);
  }
}

// Helper to open IndexedDB (simplified version for SW)
function openDB(name, version) {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(name, version);
    request.onsuccess = () => resolve(request.result);
    request.onerror = () => reject(request.error);
  });
}
